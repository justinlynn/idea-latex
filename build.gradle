plugins {
    id 'org.jetbrains.intellij' version '0.0.43'
    id 'de.undercouch.download' version '2.1.0'
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion

group pluginGroup
version = pluginVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        resources.srcDir 'resources'
    }
}

intellij {
    version ideaVersion
    type ideaType
    pluginName pluginName
    downloadSources Boolean.valueOf(sources)
    sameSinceUntilBuild Boolean.valueOf(isEAP)
    alternativeIdePath idePath
    updateSinceUntilBuild false

    publish {
        username publishUsername
        password publishPassword
        pluginId publishPluginId
        channel publishChannel
    }
}

idea {
    project {
        jdkName         = javaVersion
        languageLevel   = javaVersion
    }

    module {
        generatedSourceDirs += file('gen')
    }
}


// Configurations

configurations {
    bnf
    jflex
}

repositories {
    mavenCentral()
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

dependencies {
    bnf files("$buildDir/tools/GrammarKit/lib/grammar-kit.jar")
    bnf files("$buildDir/tools/light-psi-all.jar")
    jflex files("$buildDir/tools/JFlex.jar")

    testCompile group: 'junit', name: 'junit', version: '4.11'
}


import de.undercouch.gradle.tasks.download.Download

// Tasks

task downloadJFlexJar(type: Download) {
    description 'Downloads JFlex.'

    src 'https://github.com/JetBrains/intellij-community/raw/master/tools/lexer/jflex-1.7.0-SNAPSHOT.jar'
    dest "$buildDir/tools/JFlex.jar"
    onlyIf { !file("$buildDir/tools/JFlex.jar").exists() }
}

task downloadJFlexSkeleton(type: Download) {
    description 'Downloads JFlex skeleton.'

    src 'https://raw.github.com/JetBrains/intellij-community/master/tools/lexer/idea-flex.skeleton'
    dest "$buildDir/tools/idea-flex.skeleton"
    onlyIf { !file("$buildDir/tools/idea-flex.skeleton").exists() }
}

task generateLexer(type: JavaExec) {
    description 'Generates lexer sources with JFlex.'
    dependsOn downloadJFlexJar, downloadJFlexSkeleton

    main = 'jflex.Main'
    args = [
            '-skel',
            "$buildDir/tools/idea-flex.skeleton",
            '-d',
            'gen/mobi/hsz/idea/latex/lexer/',
            'src/mobi/hsz/idea/latex/lexer/Latex.flex',
    ]

    classpath = configurations.jflex
}

task downloadGrammarKit(type: Download) {
    description 'Downloads GrammarKit.'

    src 'https://github.com/JetBrains/Grammar-Kit/releases/download/1.2.0.1/GrammarKit.zip'
    dest "$buildDir/tools/GrammarKit.zip"
    onlyIfNewer true
}

task downloadGrammarLightPsi(type: Download) {
    description 'Downloads GrammarKit Light Psi.'

    src 'https://github.com/JetBrains/Grammar-Kit/releases/download/1.2.0.1/light-psi-all.jar'
    dest "$buildDir/tools/light-psi-all.jar"
    onlyIfNewer true
}

task unzipGrammarKit(type: Copy) {
    description 'Extracts GrammarKit files.'
    dependsOn downloadGrammarKit

    from zipTree("$buildDir/tools/GrammarKit.zip")
    into "${buildDir}/tools/"
    include "GrammarKit/lib/*"
}

task generateParser(type: JavaExec) {
    description 'Generates parser sources with GrammarKit.'
    dependsOn unzipGrammarKit, downloadGrammarLightPsi

    main = 'org.intellij.grammar.Main'
    args = [ 'gen', 'resources/bnf/Latex.bnf' ]

    classpath = configurations.bnf + configurations.compile
}


task generateSources() {
    dependsOn generateParser, generateLexer
}

clean.doFirst {
    delete 'gen', 'out'
}

compileJava.dependsOn generateSources
